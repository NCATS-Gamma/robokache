openapi: 3.0.3

info:
  title: Robokache
  description: Large object document store for ROBOKOP
  version: 4.0.0
  contact:
    email: patrick@covar.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
security:
  - google: []
paths:
  /api/document:
    get:
      summary: Get documents
      description: Get a list of documents that are either public or associated with the current user
      parameters:
        - in: query
          name: has_parent
          schema:
            type: boolean
          description: If given, filter by whether the document has a parent.
      responses:
        '200':
          description: Documents
          content:
            application/json:
              schema:
                type: array
                # Include ID along with the document
                items:
                  allOf:
                   - $ref: '#/components/schemas/Document'
                   - $ref: '#/components/schemas/DocumentResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    post:
      summary: Create a document
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '201':
          description: ID of created document
          content:
            application/json:
              schema:
                allOf:
                 - $ref: '#/components/schemas/OkResponse'
                 - $ref: '#/components/schemas/IdOfCreated'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
  /api/document/{id}:
    get:
      summary: Get document by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Document
          content:
            application/json:
              schema:
                allOf:
                 - $ref: '#/components/schemas/Document'
                 - $ref: '#/components/schemas/DocumentResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NoSuchDocumentError'
    put:
      summary: Update fields of document
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Document'
      responses:
        '200':
          description: Document successfully updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NoSuchDocumentError'
    delete:
      summary: Delete document by ID
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NoSuchDocumentError'
  /api/document/{id}/children:
    get:
      summary: Get documents that have this document as a parent
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: List of documents
          content:
            application/json:
              schema:
                type: array
                items:
                  allOf:
                   - $ref: '#/components/schemas/Document'
                   - $ref: '#/components/schemas/DocumentResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'
        '404':
          $ref: '#/components/responses/NoSuchDocumentError'
    post:
      summary: Create a new child document and set data field
      description: Shorthand to create a child document and set the data field using only one route. This creates the document with default values for fields.
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        description: Data object
        content:
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: New document created successfully
          content:
            application/json:
              schema:
                allOf:
                 - $ref: '#/components/schemas/OkResponse'
                 - $ref: '#/components/schemas/IdOfCreated'
  /api/document/{id}/data:
    get:
      summary: Get the data associated with this document
      parameters:
        - $ref: '#/components/parameters/PathId'
      responses:
        '200':
          description: Binary data
          content: 
            application/octet-stream:
              schema:
                type: string
                format: binary
        '401':
          $ref: '#/components/responses/UnauthorizedError'
    put:
      summary: Set the data associated with this document
      parameters:
        - $ref: '#/components/parameters/PathId'
      requestBody:
        description: Data object
        content: 
          application/octet-stream:
            schema:
              type: string
              format: binary
      responses:
        '200':
          description: Successfully Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OkResponse'
        '401':
          $ref: '#/components/responses/UnauthorizedError'

components:
  schemas:
    Document:
      properties:
        parent:
          type: string
        visibility:
          type: integer
        metadata:
          type: object
    DocumentResponse:
      properties:
        id:
          type: string
        created_at:
          type: string
          format: date-time
    ErrorResponse:
      type: object
      properties:
        status:
          type: string
          example: error
        message:
          type: string
          example: Detailed error message
    OkResponse:
      type: object
      properties:
        status:
          type: string
          example: ok
    IdOfCreated:
      type: object
      properties:
        id:
          type: string
          example: D8JnjJB5
  securitySchemes:
    google:
      type: http
      scheme: bearer
      bearerFormat: jwt
  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NoSuchDocumentError:
      description: Document not found
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
  parameters:
    PathId:
      name: id
      in: path
      required: true
      schema:
        type: string
